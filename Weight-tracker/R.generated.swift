//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map(Locale.init)
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.segue` struct is generated, and contains static references to 1 view controllers.
  struct segue {
    /// This struct is generated for `MainViewController`, and contains static references to 1 segues.
    struct mainViewController {
      /// Segue identifier `change`.
      static let change: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MainViewController, DataInputViewController> = Rswift.StoryboardSegueIdentifier(identifier: "change")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `change`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func change(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MainViewController, DataInputViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mainViewController.change, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.entitlements` struct is generated, and contains static references to 2 properties.
  struct entitlements {
    static let comAppleDeveloperHealthkit = true

    struct comAppleDeveloperHealthkitAccess {
      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 1 images.
  struct image {
    /// Image `camcel`.
    static let camcel = Rswift.ImageResource(bundle: R.hostingBundle, name: "camcel")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "camcel", bundle: ..., traitCollection: ...)`
    static func camcel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.camcel, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 2 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier ` HistoryCell`.
    static let historyCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: " HistoryCell")
    /// Reuse identifier `SettingCell`.
    static let settingCell: Rswift.ReuseIdentifier<SettingTableViewCell> = Rswift.ReuseIdentifier(identifier: "SettingCell")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.locolazible` struct is generated, and contains static references to 29 localization keys.
    struct locolazible {
      /// en translation: %.0f cm
      ///
      /// Locales: en
      static let settingsItemTextHeightCm = Rswift.StringResource(key: "settings.item.text.height.cm", tableName: "Locolazible", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Access to health
      ///
      /// Locales: en
      static let settingsItemAccessToHealth = Rswift.StringResource(key: "settings.item.access-to-health", tableName: "Locolazible", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Add data
      ///
      /// Locales: en
      static let settingsItemAddData = Rswift.StringResource(key: "settings.item.add-data", tableName: "Locolazible", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Add height
      ///
      /// Locales: en
      static let settingsItemAddHeight = Rswift.StringResource(key: "settings.item.add-height", tableName: "Locolazible", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Add new height!
      ///
      /// Locales: en
      static let settingsItemAddNewHeight = Rswift.StringResource(key: "settings.item.add-new-height", tableName: "Locolazible", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: BMI:
      ///
      /// Locales: en
      static let settingsItemBmi = Rswift.StringResource(key: "settings.item.bmi:", tableName: "Locolazible", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en
      static let settingsItemCancel = Rswift.StringResource(key: "settings.item.cancel", tableName: "Locolazible", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Enable Notification
      ///
      /// Locales: en
      static let settingsItemEnableNotification = Rswift.StringResource(key: "settings.item.enable-notification", tableName: "Locolazible", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Enter your height!
      ///
      /// Locales: en
      static let settingsItemEnterYourHeight = Rswift.StringResource(key: "settings.item.Enter-your-height", tableName: "Locolazible", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Error
      ///
      /// Locales: en
      static let settingsItemError = Rswift.StringResource(key: "settings.item.error", tableName: "Locolazible", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Height
      ///
      /// Locales: en
      static let settingsItemHeight = Rswift.StringResource(key: "settings.item.height", tableName: "Locolazible", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Invalid input format
      ///
      /// Locales: en
      static let settingsItemInvalidInputFormat = Rswift.StringResource(key: "settings.item.invalid-input-format", tableName: "Locolazible", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Low body weight
      ///
      /// Locales: en
      static let settingsItemLowBodyWeight = Rswift.StringResource(key: "settings.item.low-body-weight", tableName: "Locolazible", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Normal body weight
      ///
      /// Locales: en
      static let settingsItemNormalBodyWeight = Rswift.StringResource(key: "settings.item.normal-body-weight", tableName: "Locolazible", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Ok
      ///
      /// Locales: en
      static let settingsItemOk = Rswift.StringResource(key: "settings.item.ok", tableName: "Locolazible", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Overweight (pre-obesity)
      ///
      /// Locales: en
      static let settingsItemOverweightPreObesity = Rswift.StringResource(key: "settings.item.overweight-(pre-obesity)", tableName: "Locolazible", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Privacy Policy
      ///
      /// Locales: en
      static let settingsItemPrivacyPolicy = Rswift.StringResource(key: "settings.item.privacy-policy", tableName: "Locolazible", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Pronounced deficit of body weight
      ///
      /// Locales: en
      static let settingsItemPronouncedDeficitOfBodyWeight = Rswift.StringResource(key: "settings.item.pronounced-deficit-of-body-weight", tableName: "Locolazible", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Rate Us
      ///
      /// Locales: en
      static let settingsItemRateUs = Rswift.StringResource(key: "settings.item.rate-us", tableName: "Locolazible", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: StepFour
      ///
      /// Locales: en
      static let settingsItemStepFour = Rswift.StringResource(key: "settings.item.step-four", tableName: "Locolazible", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: StepOne
      ///
      /// Locales: en
      static let settingsItemStepOne = Rswift.StringResource(key: "settings.item.step-one", tableName: "Locolazible", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: StepThree
      ///
      /// Locales: en
      static let settingsItemStepThree = Rswift.StringResource(key: "settings.item.step-three", tableName: "Locolazible", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: StepTwo
      ///
      /// Locales: en
      static let settingsItemStepTwo = Rswift.StringResource(key: "settings.item.step-two", tableName: "Locolazible", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: StepZero
      ///
      /// Locales: en
      static let settingsItemStepZero = Rswift.StringResource(key: "settings.item.step-zero", tableName: "Locolazible", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Tell a Friend
      ///
      /// Locales: en
      static let settingsItemTellAFriend = Rswift.StringResource(key: "settings.item.tell-a-friend", tableName: "Locolazible", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: The obesity of the 1st degree
      ///
      /// Locales: en
      static let settingsItemTheObesityOfThe1stDegree = Rswift.StringResource(key: "settings.item.the-obesity-of-the-1st-degree", tableName: "Locolazible", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: The obesity of the 2st degree
      ///
      /// Locales: en
      static let settingsItemTheObesityOfThe2stDegree = Rswift.StringResource(key: "settings.item.the-obesity-of-the-2st-degree", tableName: "Locolazible", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: The obesity of the 3st degree
      ///
      /// Locales: en
      static let settingsItemTheObesityOfThe3stDegree = Rswift.StringResource(key: "settings.item.the-obesity-of-the-3st-degree", tableName: "Locolazible", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Units
      ///
      /// Locales: en
      static let settingsItemUnits = Rswift.StringResource(key: "settings.item.units", tableName: "Locolazible", bundle: R.hostingBundle, locales: ["en"], comment: nil)

      /// en translation: %.0f cm
      ///
      /// Locales: en
      static func settingsItemTextHeightCm(_ value1: Double, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("settings.item.text.height.cm", tableName: "Locolazible", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Locolazible", preferredLanguages: preferredLanguages) else {
          return "settings.item.text.height.cm"
        }

        let format = NSLocalizedString("settings.item.text.height.cm", tableName: "Locolazible", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Access to health
      ///
      /// Locales: en
      static func settingsItemAccessToHealth(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.item.access-to-health", tableName: "Locolazible", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Locolazible", preferredLanguages: preferredLanguages) else {
          return "settings.item.access-to-health"
        }

        return NSLocalizedString("settings.item.access-to-health", tableName: "Locolazible", bundle: bundle, comment: "")
      }

      /// en translation: Add data
      ///
      /// Locales: en
      static func settingsItemAddData(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.item.add-data", tableName: "Locolazible", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Locolazible", preferredLanguages: preferredLanguages) else {
          return "settings.item.add-data"
        }

        return NSLocalizedString("settings.item.add-data", tableName: "Locolazible", bundle: bundle, comment: "")
      }

      /// en translation: Add height
      ///
      /// Locales: en
      static func settingsItemAddHeight(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.item.add-height", tableName: "Locolazible", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Locolazible", preferredLanguages: preferredLanguages) else {
          return "settings.item.add-height"
        }

        return NSLocalizedString("settings.item.add-height", tableName: "Locolazible", bundle: bundle, comment: "")
      }

      /// en translation: Add new height!
      ///
      /// Locales: en
      static func settingsItemAddNewHeight(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.item.add-new-height", tableName: "Locolazible", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Locolazible", preferredLanguages: preferredLanguages) else {
          return "settings.item.add-new-height"
        }

        return NSLocalizedString("settings.item.add-new-height", tableName: "Locolazible", bundle: bundle, comment: "")
      }

      /// en translation: BMI:
      ///
      /// Locales: en
      static func settingsItemBmi(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.item.bmi:", tableName: "Locolazible", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Locolazible", preferredLanguages: preferredLanguages) else {
          return "settings.item.bmi:"
        }

        return NSLocalizedString("settings.item.bmi:", tableName: "Locolazible", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en
      static func settingsItemCancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.item.cancel", tableName: "Locolazible", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Locolazible", preferredLanguages: preferredLanguages) else {
          return "settings.item.cancel"
        }

        return NSLocalizedString("settings.item.cancel", tableName: "Locolazible", bundle: bundle, comment: "")
      }

      /// en translation: Enable Notification
      ///
      /// Locales: en
      static func settingsItemEnableNotification(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.item.enable-notification", tableName: "Locolazible", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Locolazible", preferredLanguages: preferredLanguages) else {
          return "settings.item.enable-notification"
        }

        return NSLocalizedString("settings.item.enable-notification", tableName: "Locolazible", bundle: bundle, comment: "")
      }

      /// en translation: Enter your height!
      ///
      /// Locales: en
      static func settingsItemEnterYourHeight(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.item.Enter-your-height", tableName: "Locolazible", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Locolazible", preferredLanguages: preferredLanguages) else {
          return "settings.item.Enter-your-height"
        }

        return NSLocalizedString("settings.item.Enter-your-height", tableName: "Locolazible", bundle: bundle, comment: "")
      }

      /// en translation: Error
      ///
      /// Locales: en
      static func settingsItemError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.item.error", tableName: "Locolazible", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Locolazible", preferredLanguages: preferredLanguages) else {
          return "settings.item.error"
        }

        return NSLocalizedString("settings.item.error", tableName: "Locolazible", bundle: bundle, comment: "")
      }

      /// en translation: Height
      ///
      /// Locales: en
      static func settingsItemHeight(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.item.height", tableName: "Locolazible", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Locolazible", preferredLanguages: preferredLanguages) else {
          return "settings.item.height"
        }

        return NSLocalizedString("settings.item.height", tableName: "Locolazible", bundle: bundle, comment: "")
      }

      /// en translation: Invalid input format
      ///
      /// Locales: en
      static func settingsItemInvalidInputFormat(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.item.invalid-input-format", tableName: "Locolazible", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Locolazible", preferredLanguages: preferredLanguages) else {
          return "settings.item.invalid-input-format"
        }

        return NSLocalizedString("settings.item.invalid-input-format", tableName: "Locolazible", bundle: bundle, comment: "")
      }

      /// en translation: Low body weight
      ///
      /// Locales: en
      static func settingsItemLowBodyWeight(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.item.low-body-weight", tableName: "Locolazible", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Locolazible", preferredLanguages: preferredLanguages) else {
          return "settings.item.low-body-weight"
        }

        return NSLocalizedString("settings.item.low-body-weight", tableName: "Locolazible", bundle: bundle, comment: "")
      }

      /// en translation: Normal body weight
      ///
      /// Locales: en
      static func settingsItemNormalBodyWeight(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.item.normal-body-weight", tableName: "Locolazible", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Locolazible", preferredLanguages: preferredLanguages) else {
          return "settings.item.normal-body-weight"
        }

        return NSLocalizedString("settings.item.normal-body-weight", tableName: "Locolazible", bundle: bundle, comment: "")
      }

      /// en translation: Ok
      ///
      /// Locales: en
      static func settingsItemOk(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.item.ok", tableName: "Locolazible", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Locolazible", preferredLanguages: preferredLanguages) else {
          return "settings.item.ok"
        }

        return NSLocalizedString("settings.item.ok", tableName: "Locolazible", bundle: bundle, comment: "")
      }

      /// en translation: Overweight (pre-obesity)
      ///
      /// Locales: en
      static func settingsItemOverweightPreObesity(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.item.overweight-(pre-obesity)", tableName: "Locolazible", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Locolazible", preferredLanguages: preferredLanguages) else {
          return "settings.item.overweight-(pre-obesity)"
        }

        return NSLocalizedString("settings.item.overweight-(pre-obesity)", tableName: "Locolazible", bundle: bundle, comment: "")
      }

      /// en translation: Privacy Policy
      ///
      /// Locales: en
      static func settingsItemPrivacyPolicy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.item.privacy-policy", tableName: "Locolazible", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Locolazible", preferredLanguages: preferredLanguages) else {
          return "settings.item.privacy-policy"
        }

        return NSLocalizedString("settings.item.privacy-policy", tableName: "Locolazible", bundle: bundle, comment: "")
      }

      /// en translation: Pronounced deficit of body weight
      ///
      /// Locales: en
      static func settingsItemPronouncedDeficitOfBodyWeight(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.item.pronounced-deficit-of-body-weight", tableName: "Locolazible", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Locolazible", preferredLanguages: preferredLanguages) else {
          return "settings.item.pronounced-deficit-of-body-weight"
        }

        return NSLocalizedString("settings.item.pronounced-deficit-of-body-weight", tableName: "Locolazible", bundle: bundle, comment: "")
      }

      /// en translation: Rate Us
      ///
      /// Locales: en
      static func settingsItemRateUs(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.item.rate-us", tableName: "Locolazible", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Locolazible", preferredLanguages: preferredLanguages) else {
          return "settings.item.rate-us"
        }

        return NSLocalizedString("settings.item.rate-us", tableName: "Locolazible", bundle: bundle, comment: "")
      }

      /// en translation: StepFour
      ///
      /// Locales: en
      static func settingsItemStepFour(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.item.step-four", tableName: "Locolazible", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Locolazible", preferredLanguages: preferredLanguages) else {
          return "settings.item.step-four"
        }

        return NSLocalizedString("settings.item.step-four", tableName: "Locolazible", bundle: bundle, comment: "")
      }

      /// en translation: StepOne
      ///
      /// Locales: en
      static func settingsItemStepOne(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.item.step-one", tableName: "Locolazible", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Locolazible", preferredLanguages: preferredLanguages) else {
          return "settings.item.step-one"
        }

        return NSLocalizedString("settings.item.step-one", tableName: "Locolazible", bundle: bundle, comment: "")
      }

      /// en translation: StepThree
      ///
      /// Locales: en
      static func settingsItemStepThree(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.item.step-three", tableName: "Locolazible", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Locolazible", preferredLanguages: preferredLanguages) else {
          return "settings.item.step-three"
        }

        return NSLocalizedString("settings.item.step-three", tableName: "Locolazible", bundle: bundle, comment: "")
      }

      /// en translation: StepTwo
      ///
      /// Locales: en
      static func settingsItemStepTwo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.item.step-two", tableName: "Locolazible", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Locolazible", preferredLanguages: preferredLanguages) else {
          return "settings.item.step-two"
        }

        return NSLocalizedString("settings.item.step-two", tableName: "Locolazible", bundle: bundle, comment: "")
      }

      /// en translation: StepZero
      ///
      /// Locales: en
      static func settingsItemStepZero(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.item.step-zero", tableName: "Locolazible", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Locolazible", preferredLanguages: preferredLanguages) else {
          return "settings.item.step-zero"
        }

        return NSLocalizedString("settings.item.step-zero", tableName: "Locolazible", bundle: bundle, comment: "")
      }

      /// en translation: Tell a Friend
      ///
      /// Locales: en
      static func settingsItemTellAFriend(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.item.tell-a-friend", tableName: "Locolazible", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Locolazible", preferredLanguages: preferredLanguages) else {
          return "settings.item.tell-a-friend"
        }

        return NSLocalizedString("settings.item.tell-a-friend", tableName: "Locolazible", bundle: bundle, comment: "")
      }

      /// en translation: The obesity of the 1st degree
      ///
      /// Locales: en
      static func settingsItemTheObesityOfThe1stDegree(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.item.the-obesity-of-the-1st-degree", tableName: "Locolazible", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Locolazible", preferredLanguages: preferredLanguages) else {
          return "settings.item.the-obesity-of-the-1st-degree"
        }

        return NSLocalizedString("settings.item.the-obesity-of-the-1st-degree", tableName: "Locolazible", bundle: bundle, comment: "")
      }

      /// en translation: The obesity of the 2st degree
      ///
      /// Locales: en
      static func settingsItemTheObesityOfThe2stDegree(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.item.the-obesity-of-the-2st-degree", tableName: "Locolazible", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Locolazible", preferredLanguages: preferredLanguages) else {
          return "settings.item.the-obesity-of-the-2st-degree"
        }

        return NSLocalizedString("settings.item.the-obesity-of-the-2st-degree", tableName: "Locolazible", bundle: bundle, comment: "")
      }

      /// en translation: The obesity of the 3st degree
      ///
      /// Locales: en
      static func settingsItemTheObesityOfThe3stDegree(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.item.the-obesity-of-the-3st-degree", tableName: "Locolazible", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Locolazible", preferredLanguages: preferredLanguages) else {
          return "settings.item.the-obesity-of-the-3st-degree"
        }

        return NSLocalizedString("settings.item.the-obesity-of-the-3st-degree", tableName: "Locolazible", bundle: bundle, comment: "")
      }

      /// en translation: Units
      ///
      /// Locales: en
      static func settingsItemUnits(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.item.units", tableName: "Locolazible", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Locolazible", preferredLanguages: preferredLanguages) else {
          return "settings.item.units"
        }

        return NSLocalizedString("settings.item.units", tableName: "Locolazible", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = OnboardingPager

      let bundle = R.hostingBundle
      let mainViewController = StoryboardViewControllerResource<MainViewController>(identifier: "MainViewController")
      let name = "Main"
      let onboardingPager = StoryboardViewControllerResource<OnboardingPager>(identifier: "OnboardingPager")
      let settingTableViewController = StoryboardViewControllerResource<SettingTableViewController>(identifier: "SettingTableViewController")
      let stepFour = StoryboardViewControllerResource<StepFour>(identifier: "StepFour")
      let stepOne = StoryboardViewControllerResource<StepOne>(identifier: "StepOne")
      let stepThree = StoryboardViewControllerResource<StepThree>(identifier: "StepThree")
      let stepTwo = StoryboardViewControllerResource<StepTwo>(identifier: "StepTwo")
      let stepZero = StoryboardViewControllerResource<StepZero>(identifier: "StepZero")

      func mainViewController(_: Void = ()) -> MainViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mainViewController)
      }

      func onboardingPager(_: Void = ()) -> OnboardingPager? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: onboardingPager)
      }

      func settingTableViewController(_: Void = ()) -> SettingTableViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settingTableViewController)
      }

      func stepFour(_: Void = ()) -> StepFour? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: stepFour)
      }

      func stepOne(_: Void = ()) -> StepOne? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: stepOne)
      }

      func stepThree(_: Void = ()) -> StepThree? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: stepThree)
      }

      func stepTwo(_: Void = ()) -> StepTwo? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: stepTwo)
      }

      func stepZero(_: Void = ()) -> StepZero? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: stepZero)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "arrow.up", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrow.up' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "camcel", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'camcel' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.main().mainViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mainViewController' could not be loaded from storyboard 'Main' as 'MainViewController'.") }
        if _R.storyboard.main().onboardingPager() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'onboardingPager' could not be loaded from storyboard 'Main' as 'OnboardingPager'.") }
        if _R.storyboard.main().settingTableViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settingTableViewController' could not be loaded from storyboard 'Main' as 'SettingTableViewController'.") }
        if _R.storyboard.main().stepFour() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'stepFour' could not be loaded from storyboard 'Main' as 'StepFour'.") }
        if _R.storyboard.main().stepOne() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'stepOne' could not be loaded from storyboard 'Main' as 'StepOne'.") }
        if _R.storyboard.main().stepThree() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'stepThree' could not be loaded from storyboard 'Main' as 'StepThree'.") }
        if _R.storyboard.main().stepTwo() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'stepTwo' could not be loaded from storyboard 'Main' as 'StepTwo'.") }
        if _R.storyboard.main().stepZero() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'stepZero' could not be loaded from storyboard 'Main' as 'StepZero'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
